import sys

def floyd_warshall(n, edges):
    # Initialize the distance and next matrices
    dist = [[sys.maxsize] * n for _ in range(n)]
    next_node = [[-1] * n for _ in range(n)]
    
    # Distance from a node to itself is 0
    for i in range(n):
        dist[i][i] = 0
    
    # Fill the matrix with the initial distances and set up the path
    for frm, to, weight in edges:
        dist[frm][to] = weight
        next_node[frm][to] = to
    
    # Floyd-Warshall algorithm with path reconstruction
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] < sys.maxsize and dist[k][j] < sys.maxsize:
                    if dist[i][j] > dist[i][k] + dist[k][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
                        next_node[i][j] = next_node[i][k]
    
    return dist, next_node

def reconstruct_path(start, end, next_node):
    # Reconstruct the shortest path from start to end
    if next_node[start][end] == -1:
        return None  # No path exists
    path = [start]
    while start != end:
        start = next_node[start][end]
        path.append(start)
    return path

# Main function to get user input and find the shortest path
def main():
    # Input bus stand names and edges
    bus_stand_to_index = {}
    edges = []
    
    print("Enter edges in the format 'from to distance' (type 'done' to finish):")
    while True:
        entry = input()
        if entry.lower() == "done":
            break
        frm, to, distance = entry.split()
        distance = int(distance)
        
        # Assign indices to bus stands if not already assigned
        if frm not in bus_stand_to_index:
            bus_stand_to_index[frm] = len(bus_stand_to_index)
        if to not in bus_stand_to_index:
            bus_stand_to_index[to] = len(bus_stand_to_index)
        
        # Convert bus stand names to indices for edges
        frm_index = bus_stand_to_index[frm]
        to_index = bus_stand_to_index[to]
        edges.append((frm_index, to_index, distance))
    
    # Get the number of bus stands
    n = len(bus_stand_to_index)
    
    # Run Floyd-Warshall algorithm
    dist, next_node = floyd_warshall(n, edges)
    
    # Reverse the bus_stand_to_index dictionary for easy lookup by name
    index_to_bus_stand = {index: name for name, index in bus_stand_to_index.items()}
    
    # Input starting and ending bus stands
    start_name = input("Enter the starting bus stand: ")
    end_name = input("Enter the ending bus stand: ")
    
    # Check if start and end names are valid
    if start_name not in bus_stand_to_index or end_name not in bus_stand_to_index:
        print("Invalid bus stand name(s) entered.")
        return
    
    # Get indices of start and end bus stands
    start = bus_stand_to_index[start_name]
    end = bus_stand_to_index[end_name]
    
    # Find the shortest path and distance
    path = reconstruct_path(start, end, next_node)
    if path is None:
        print(f"No path exists from {start_name} to {end_name}.")
    else:
        # Convert path from indices to bus stand names
        path_names = [index_to_bus_stand[idx] for idx in path]
        print(f"Shortest path from {start_name} to {end_name}: {' -> '.join(path_names)}")
        print(f"Total distance: {dist[start][end]}")

# Run the main function
if _name_ == "_main_":
    main()